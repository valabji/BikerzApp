import React from "react";
import {
    StyleSheet,
    ImageBackground,
    Dimensions,
    TouchableOpacity,
    StatusBar,
    KeyboardAvoidingView,
    View,
    ActivityIndicator,
    Image
} from "react-native";
import { Block, Checkbox, theme } from "galio-framework";
import * as Ico from 'react-native-feather';
import DropDownPicker from "react-native-dropdown-picker"
import DateTimePicker from '@react-native-community/datetimepicker';
import { Button, Header, Text, Input } from "../components";
import { Images, argonTheme } from "../constants";
import { useState } from "react";
import CheckBox from '@react-native-community/checkbox';
import Icon from 'react-native-vector-icons/Feather';
import AIcon from 'react-native-vector-icons/AntDesign';
import { StackActions } from '@react-navigation/native';

import ImagePicker, { launchCamera, launchImageLibrary } from 'react-native-image-picker';
import CPicker from 'react-native-image-crop-picker';
import { ScrollView } from "react-native-gesture-handler";
import { post } from "../navigation/Network";
import ImgToBase64 from 'react-native-image-base64';

const { width, height } = Dimensions.get("screen");
var server = ""
class Register extends React.Component {

    constructor(props) {
        super(props)
        fetch("https://api.gofile.io/getServer", {
            method: 'get',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
            },
        }).then((response) => response.json())
            .then((json) => {
                server = json.data.server

            })
            .catch((error) => {
                console.error(error);
            });
        this.state = {
            reasons: [
                { label: "AAA", value: "" + 11 },
                { label: "AAA", value: "" + 11 },
                { label: "AAA", value: "" + 11 },
                { label: "AAA", value: "" + 11 },
            ],
            resid: "",
            resname: "",
            subject: "",
            desc: "",

            s1: "9:00 AM",

            imgname: "",
            imgtype: "",
            imguri: "",

            imgname2: "",
            imgtype2: "",
            imguri2: "",


            imgname3: "",
            imgtype3: "",
            imguri3: "",



            name: "",
            address: "",
            city: "",
            phone: "",
            site: "",
            section: "",
            workinghours: "",
            facebook: "",
            twitter: "",
            youtube: "",
            instagram: "",
            linkedin: "",
            faq: [],
            description: "",
            tags: "",
            video: "",
            logo: "",
            photo: "",
            photos: "",


        }
    }
    Main = () => {
        const [pg, setPg] = useState(1)
        const [ac, setAc] = useState(0)
        const [q1, setQ1] = useState(false)

        const [w1, setW1] = useState(false)
        const [w2, setW2] = useState(false)
        const [w3, setW3] = useState(false)
        const [w4, setW4] = useState(false)
        const [w5, setW5] = useState(false)
        const [w6, setW6] = useState(false)
        const [w7, setW7] = useState(false)

        const [d1, setD1] = useState(false)
        const [d2, setD2] = useState(false)
        const [d3, setD3] = useState(false)
        const [d4, setD4] = useState(false)
        const [d5, setD5] = useState(false)
        const [d6, setD6] = useState(false)
        const [d7, setD7] = useState(false)

        const [s1, setS1] = useState("8:00 AM")
        const [s2, setS2] = useState("8:00 AM")
        const [s3, setS3] = useState("8:00 AM")
        const [s4, setS4] = useState("8:00 AM")
        const [s5, setS5] = useState("8:00 AM")
        const [s6, setS6] = useState("8:00 AM")
        const [s7, setS7] = useState("8:00 AM")

        const [e1, setE1] = useState("4:00 PM")
        const [e2, setE2] = useState("4:00 PM")
        const [e3, setE3] = useState("4:00 PM")
        const [e4, setE4] = useState("4:00 PM")
        const [e5, setE5] = useState("4:00 PM")
        const [e6, setE6] = useState("4:00 PM")
        const [e7, setE7] = useState("4:00 PM")

        const [times, setTimes] = useState({
            s1: "8:00 AM",
            s2: "8:00 AM",
            s3: "8:00 AM",
            s4: "8:00 AM",
            s5: "8:00 AM",
            s6: "8:00 AM",
            s7: "8:00 AM",
            e1: "4:00 PM",
            e2: "4:00 PM",
            e3: "4:00 PM",
            e4: "4:00 PM",
            e5: "4:00 PM",
            e6: "4:00 PM",
            e7: "4:00 PM",
        })
        const [curt, setCurt] = useState("s1");

        const [O, setO] = useState(false)
        const [date, setDate] = useState(new Date(161803400000));
        const [mode, setMode] = useState('time');
        const [show, setShow] = useState(false);
        const [load1, setLoad1] = useState(false);
        const [load2, setLoad2] = useState(false);
        const [load3, setLoad3] = useState(false);
        const [load4, setLoad4] = useState(false);
        const [setter, setSetter] = useState(() => { })
        const [loading, setLoading] = useState(false);
        const [uploading, setUploading] = useState(0);
        const [imgs, setImgs] = useState([])
        const options = {
            title: 'Select Image',
            storageOptions: {
                skipBackup: true,
                path: 'images',
            },
        };

        const upPic = (photo, setter = () => { }) => {
            setUploading(uploading + 1)
            let fdata = new FormData()
            fdata.append("file", photo)
            fetch("https://" + server + ".gofile.io/uploadFile", {
                method: 'post',
                headers: {
                    Accept: 'application/json',
                    "Content-type": "multipart/form-data"
                },
                body: fdata
            }).then((response) => response.json())
                .then((json) => {
                    let link = json.data.downloadPage
                    console.log(link)
                    setter(link)
                })
                .catch((error) => {
                    console.error(error);
                }).finally(() => {
                    setUploading(uploading - 1)
                });
        }

        var cats = []
        global.cats.forEach(element => {
            cats.push({ label: element.name, value: '' + element.id, },)
        });

        const RenderPics = ({ uri }) => {
            return <View
                style={{
                    overflow: "hidden",
                    borderRadius: 10,
                    width: 100,
                    height: 100,
                    elevation: 1,
                    marginRight: 10
                }}
            >
                <Image
                    source={{ uri: uri }}
                    style={{
                        backgroundColor: "#555",
                        resizeMode: "contain",
                        overflow: "hidden",
                        borderRadius: 10,
                        width: 100,
                        height: 100,
                    }}
                />
            </View>
        }

        return (
            <Block flex>
                <Block style={{}}>
                    <Header title="بوابة البناء" clicky={() => { console.log("Cli111") }} navigation={this.props.navigation} />
                </Block>
                <ImageBackground
                    source={Images.RegisterBackground}
                    style={{ width, height }}
                >
                    <View style={{ justifyContent: "space-around", height: height, width: width, alignContent: "center", alignSelf: "center" }}>
                        <Block style={[styles.registerContainer, { flex: pg == 90 ? 0.25 : 0.6 }]}>
                            <Block flex>
                                <Block flex={0.17} middle>
                                    <Text color="#8898AA" size={12}>
                                        تسجيل الشركات
                  </Text>
                                </Block>
                                {show && (
                                    <DateTimePicker
                                        testID="dateTimePicker"
                                        value={date}
                                        mode={mode}
                                        is24Hour={true}
                                        display="default"
                                        onChange={(event, selectedDate) => {
                                            const currentDate = selectedDate || date;
                                            setShow(Platform.OS === 'ios');
                                            var tms = times;
                                            var hrs = currentDate.getHours()
                                            var flg = "AM"
                                            if (hrs >= 12) {
                                                hrs -= 12
                                                flg = "PM"
                                            }
                                            tms["" + curt] = hrs + ":" + currentDate.getMinutes() + " " + flg
                                            setTimes(tms);
                                            this.setState({ workinghours: tms })
                                        }}
                                    />
                                )}
                                <Block flex style={{ display: pg == 1 ? "flex" : "none" }} center>
                                    <KeyboardAvoidingView
                                        style={{ flex: 1, alignItems: "center" }}
                                        behavior="padding"
                                        enabled
                                    >
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0, }}>
                                            <Input
                                                borderless
                                                placeholder="اسم شركتك"
                                                onChangeText={(v) => { this.setState({ name: v }) }}
                                                iconContent={
                                                    <Ico.Briefcase stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="العنوان الكامل"
                                                onChangeText={(v) => { this.setState({ address: v }) }}
                                                iconContent={
                                                    <Ico.MapPin stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="المدينة"
                                                onChangeText={(v) => { this.setState({ city: v }) }}
                                                iconContent={
                                                    <Ico.MapPin stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="الهاتف"
                                                onChangeText={(v) => { this.setState({ phone: v }) }}
                                                iconContent={
                                                    <Ico.Phone stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="الموقع الالكتروني"
                                                onChangeText={(v) => { this.setState({ site: v }) }}
                                                iconContent={
                                                    <Ico.Globe stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block middle row>
                                            <Button color="primary" onPress={() => { setPg(pg + 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    التالي
                        </Text>
                                            </Button>
                                            <Button color="muted" onPress={() => { }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    السابق
                        </Text>
                                            </Button>
                                        </Block>
                                    </KeyboardAvoidingView>
                                </Block>
                                <Block flex style={{ display: pg == 2 ? "flex" : "none" }} center>
                                    <KeyboardAvoidingView
                                        style={{ flex: 1, alignItems: "center" }}
                                        behavior="padding"
                                        enabled
                                    >
                                        <Block width={width * 0.8} height={O ? 200 : 50} style={{ marginBottom: 0 }}>
                                            <DropDownPicker
                                                items={cats}
                                                defaultValue={this.state.country}
                                                containerStyle={{ height: 40 }}
                                                placeholder="القسم"
                                                style={{ backgroundColor: '#fafafa' }}
                                                itemStyle={{
                                                    justifyContent: 'flex-start',
                                                }}
                                                onOpen={() => { setO(true) }}
                                                onClose={() => { setO(false) }}
                                                dropDownStyle={{ backgroundColor: '#fafafa', }}
                                                onChangeItem={item => this.setState({
                                                    section: item.label
                                                })}
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Text h6>ساعات العمل</Text>
                                            <View style={{ flexDirection: "row", marginTop: 5, justifyContent: "space-between" }}>
                                                <View style={{ flexDirection: "row", overflow: "hidden", paddingTop: 5, paddingBottom: 5 }}>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={w1}
                                                        onValueChange={(v) => { setW1(v) }}
                                                    />
                                                    <Text style={{ width: 50 }} >السبت</Text>
                                                </View>
                                                <Text style={{ display: (w1 && !d1) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("s1"); setShow(true) }} >{times.s1}</Text>
                                                <Text style={{ display: (w1 && !d1) ? "flex" : "none", paddingTop: 5, paddingBottom: 5 }}> - </Text>
                                                <Text style={{ display: (w1 && !d1) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("e1"); setShow(true) }} >{times.e1}</Text>
                                                <View style={{ display: (w1) ? "flex" : "none", flexDirection: "row", overflow: "hidden", paddingLeft: 5, paddingRight: 5, paddingTop: 5, paddingBottom: 5 }}>
                                                    <Text>24 ساعة</Text>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={d1}
                                                        onValueChange={(v) => { setD1(v) }}
                                                    />
                                                </View>
                                            </View>
                                            <View style={{ flexDirection: "row", marginTop: 5, justifyContent: "space-between" }}>
                                                <View style={{ flexDirection: "row", overflow: "hidden", paddingTop: 5, paddingBottom: 5 }}>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={w2}
                                                        onValueChange={(v) => { setW2(v) }}
                                                    />
                                                    <Text style={{ width: 50 }} >الاحد</Text>
                                                </View>
                                                <Text style={{ display: (w2 && !d2) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("s2"); setShow(true) }} >{times.s2}</Text>
                                                <Text style={{ display: (w2 && !d2) ? "flex" : "none", paddingTop: 5, paddingBottom: 5 }}> - </Text>
                                                <Text style={{ display: (w2 && !d2) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("e2"); setShow(true) }} >{times.e2}</Text>
                                                <View style={{ display: (w2) ? "flex" : "none", flexDirection: "row", overflow: "hidden", paddingLeft: 5, paddingRight: 5, paddingTop: 5, paddingBottom: 5 }}>
                                                    <Text>24 ساعة</Text>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={d2}
                                                        onValueChange={(v) => { setD2(v) }}
                                                    />
                                                </View>
                                            </View>
                                            <View style={{ flexDirection: "row", marginTop: 5, justifyContent: "space-between" }}>
                                                <View style={{ flexDirection: "row", overflow: "hidden", paddingTop: 5, paddingBottom: 5 }}>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={w3}
                                                        onValueChange={(v) => { setW3(v) }}
                                                    />
                                                    <Text style={{ width: 50 }} >الاثنين</Text>
                                                </View>
                                                <Text style={{ display: (w3 && !d3) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("s3"); setShow(true) }} >{times.s3}</Text>
                                                <Text style={{ display: (w3 && !d3) ? "flex" : "none", paddingTop: 5, paddingBottom: 5 }}> - </Text>
                                                <Text style={{ display: (w3 && !d3) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("e3"); setShow(true) }} >{times.e3}</Text>
                                                <View style={{ display: (w3) ? "flex" : "none", flexDirection: "row", overflow: "hidden", paddingLeft: 5, paddingRight: 5, paddingTop: 5, paddingBottom: 5 }}>
                                                    <Text>24 ساعة</Text>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={d3}
                                                        onValueChange={(v) => { setD3(v) }}
                                                    />
                                                </View>
                                            </View>
                                            <View style={{ flexDirection: "row", marginTop: 5, justifyContent: "space-between" }}>
                                                <View style={{ flexDirection: "row", overflow: "hidden", paddingTop: 5, paddingBottom: 5 }}>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={w4}
                                                        onValueChange={(v) => { setW4(v) }}
                                                    />
                                                    <Text style={{ width: 50 }} >الثلاثاء</Text>
                                                </View>
                                                <Text style={{ display: (w4 && !d4) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("s4"); setShow(true) }} >{times.s4}</Text>
                                                <Text style={{ display: (w4 && !d4) ? "flex" : "none", paddingTop: 5, paddingBottom: 5 }}> - </Text>
                                                <Text style={{ display: (w4 && !d4) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("e4"); setShow(true) }} >{times.e4}</Text>
                                                <View style={{ display: (w4) ? "flex" : "none", flexDirection: "row", overflow: "hidden", paddingLeft: 5, paddingRight: 5, paddingTop: 5, paddingBottom: 5 }}>
                                                    <Text>24 ساعة</Text>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={d4}
                                                        onValueChange={(v) => { setD4(v) }}
                                                    />
                                                </View>
                                            </View>
                                            <View style={{ flexDirection: "row", marginTop: 5, justifyContent: "space-between" }}>
                                                <View style={{ flexDirection: "row", overflow: "hidden", paddingTop: 5, paddingBottom: 5 }}>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={w5}
                                                        onValueChange={(v) => { setW5(v) }}
                                                    />
                                                    <Text style={{ width: 50 }} >الاربعاء</Text>
                                                </View>
                                                <Text style={{ display: (w5 && !d5) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("s5"); setShow(true) }} >{times.s5}</Text>
                                                <Text style={{ display: (w5 && !d5) ? "flex" : "none", paddingTop: 5, paddingBottom: 5 }}> - </Text>
                                                <Text style={{ display: (w5 && !d5) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("e5"); setShow(true) }} >{times.e5}</Text>
                                                <View style={{ display: (w5) ? "flex" : "none", flexDirection: "row", overflow: "hidden", paddingLeft: 5, paddingRight: 5, paddingTop: 5, paddingBottom: 5 }}>
                                                    <Text>24 ساعة</Text>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={d5}
                                                        onValueChange={(v) => { setD5(v) }}
                                                    />
                                                </View>
                                            </View>
                                            <View style={{ flexDirection: "row", marginTop: 5, justifyContent: "space-between" }}>
                                                <View style={{ flexDirection: "row", overflow: "hidden", paddingTop: 5, paddingBottom: 5 }}>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={w6}
                                                        onValueChange={(v) => { setW6(v) }}
                                                    />
                                                    <Text style={{ width: 50 }} >الخميس</Text>
                                                </View>
                                                <Text style={{ display: (w6 && !d6) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("s6"); setShow(true) }} >{times.s6}</Text>
                                                <Text style={{ display: (w6 && !d6) ? "flex" : "none", paddingTop: 5, paddingBottom: 5 }}> - </Text>
                                                <Text style={{ display: (w6 && !d6) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("e6"); setShow(true) }} >{times.e6}</Text>
                                                <View style={{ display: (w6) ? "flex" : "none", flexDirection: "row", overflow: "hidden", paddingLeft: 5, paddingRight: 5, paddingTop: 5, paddingBottom: 5 }}>
                                                    <Text>24 ساعة</Text>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={d6}
                                                        onValueChange={(v) => { setD6(v) }}
                                                    />
                                                </View>
                                            </View>
                                            <View style={{ flexDirection: "row", marginTop: 5, justifyContent: "space-between" }}>
                                                <View style={{ flexDirection: "row", overflow: "hidden", paddingTop: 5, paddingBottom: 5 }}>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={w7}
                                                        onValueChange={(v) => { setW7(v) }}
                                                    />
                                                    <Text style={{ width: 50 }} >الجمعة</Text>
                                                </View>
                                                <Text style={{ display: (w7 && !d7) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("s7"); setShow(true) }} >{times.s7}</Text>
                                                <Text style={{ display: (w7 && !d7) ? "flex" : "none", paddingTop: 5, paddingBottom: 5 }}> - </Text>
                                                <Text style={{ display: (w7 && !d7) ? "flex" : "none", width: 60, paddingTop: 5, paddingBottom: 5 }} onPress={() => { setCurt("e7"); setShow(true) }} >{times.e7}</Text>
                                                <View style={{ display: (w7) ? "flex" : "none", flexDirection: "row", overflow: "hidden", paddingLeft: 5, paddingRight: 5, paddingTop: 5, paddingBottom: 5 }}>
                                                    <Text>24 ساعة</Text>
                                                    <CheckBox style={{ width: 20, height: 20, marginRight: 0, marginLeft: 10 }}
                                                        value={d7}
                                                        onValueChange={(v) => { setD7(v) }}
                                                    />
                                                </View>
                                            </View>

                                        </Block>
                                        <Block middle row>
                                            <Button color="primary" onPress={() => { setPg(pg + 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    التالي
                        </Text>
                                            </Button>
                                            <Button color="active" onPress={() => { setPg(pg - 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    السابق
                        </Text>
                                            </Button>
                                        </Block>
                                    </KeyboardAvoidingView>
                                </Block>
                                <Block flex style={{ display: pg == 3 ? "flex" : "none" }} center>
                                    <KeyboardAvoidingView
                                        style={{ flex: 1, alignItems: "center" }}
                                        behavior="padding"
                                        enabled
                                    >
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Text>التواصل الاجتماعي</Text>
                                        </Block>

                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="facebook"
                                                onChangeText={(v) => { this.setState({ facebook: v }) }}
                                                iconContent={
                                                    <Ico.Facebook stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="twitter"
                                                onChangeText={(v) => { this.setState({ twitter: v }) }}
                                                iconContent={
                                                    <Ico.Twitter stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="Youtube"
                                                onChangeText={(v) => { this.setState({ youtube: v }) }}
                                                iconContent={
                                                    <Ico.Youtube stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>

                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="Instagram"
                                                onChangeText={(v) => { this.setState({ instagram: v }) }}
                                                iconContent={
                                                    <Ico.Instagram stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="LinkedIn"
                                                onChangeText={(v) => { this.setState({ linkedin: v }) }}
                                                iconContent={
                                                    <Ico.Linkedin stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block middle row>
                                            <Button color="primary" onPress={() => { setPg(pg + 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    التالي
                        </Text>
                                            </Button>
                                            <Button color="active" onPress={() => { setPg(pg - 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    السابق
                        </Text>
                                            </Button>
                                        </Block>
                                    </KeyboardAvoidingView>
                                </Block>
                                <Block flex style={{ display: pg == 4 ? "flex" : "none" }} center>
                                    <KeyboardAvoidingView
                                        style={{ flex: 1, alignItems: "center" }}
                                        behavior="padding"
                                        enabled
                                    >
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Text>اسئلة مكررة</Text>
                                        </Block>
                                        <ScrollView contentContainerStyle={{ padding: 5 }} >
                                            {this.state.faq.map((item, index) => {
                                                return <View>
                                                    <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                                        <Input
                                                            borderless
                                                            placeholder="السؤال"
                                                            onChangeText={(v) => {
                                                                let f2 = this.state.faq
                                                                f2[index] = {
                                                                    q: v,
                                                                    a: f2[index].a
                                                                }
                                                                this.setState({ faq: f2 })
                                                                console.log(this.state.faq)
                                                            }}
                                                            iconContent={
                                                                <AIcon name="questioncircleo" size={18} style={{ marginRight: 5 }} />
                                                            }
                                                        />
                                                    </Block>
                                                    <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                                        <Input
                                                            multiline={true}
                                                            placeholder="الاجابة ..."
                                                            onChangeText={(v) => {
                                                                let f2 = this.state.faq
                                                                f2[index] = {
                                                                    q: f2[index].a,
                                                                    a: v
                                                                }
                                                                this.setState({ faq: f2 })
                                                                console.log(this.state.faq)
                                                            }}
                                                            style={{ height: 100, alignSelf: "flex-start", textAlignVertical: "top" }}
                                                            iconContent={
                                                                <View />
                                                            }
                                                        />
                                                    </Block>
                                                </View>
                                            })}
                                        </ScrollView>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>

                                            <TouchableOpacity
                                                onPress={() => {
                                                    let f2 = this.state.faq
                                                    if (f2.length != 0) {
                                                        f2.push(f2[f2.length - 1] + 1)
                                                    } else {
                                                        f2.push(1)
                                                    }
                                                    this.setState({ faq: f2 })
                                                    console.log(f2)
                                                }}
                                                style={{ flexDirection: "row" }}>
                                                <Text>اضافة سؤال</Text>
                                                <AIcon name="plussquareo" size={18} style={{ marginRight: 5, marginLeft: 5, marginTop: 3 }} />
                                            </TouchableOpacity>
                                        </Block>

                                        <Block middle row>
                                            <Button color="primary" onPress={() => { setPg(pg + 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    التالي
                        </Text>
                                            </Button>
                                            <Button color="active" onPress={() => { setPg(pg - 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    السابق
                        </Text>
                                            </Button>
                                        </Block>
                                    </KeyboardAvoidingView>
                                </Block>
                                <Block flex style={{ display: pg == 5 ? "flex" : "none" }} center>
                                    <KeyboardAvoidingView
                                        style={{ flex: 1, alignItems: "center" }}
                                        behavior="padding"
                                        enabled
                                    >
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Text>الوصف</Text>
                                        </Block>

                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                multiline={true}
                                                style={{ height: 100, alignSelf: "flex-start", textAlignVertical: "top" }}
                                                placeholder="الوصف"
                                                onChangeText={(v) => { this.setState({ description: v }) }}
                                                iconContent={
                                                    <Ico.Info stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>

                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="الوسوم"
                                                onChangeText={(v) => { this.setState({ tags: v }) }}
                                                iconContent={
                                                    <Ico.Tag stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block middle row>
                                            <Button color="primary" onPress={() => { setPg(pg + 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    التالي
                        </Text>
                                            </Button>
                                            <Button color="active" onPress={() => { setPg(pg - 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    السابق
                        </Text>
                                            </Button>
                                        </Block>
                                    </KeyboardAvoidingView>
                                </Block>
                                <Block flex style={{ display: pg == 6 ? "flex" : "none" }} center>
                                    <KeyboardAvoidingView
                                        style={{ flex: 1, alignItems: "center" }}
                                        behavior="padding"
                                        enabled
                                    >
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="رابط لفيديو شركتك"
                                                onChangeText={(v) => { this.setState({ video: v }) }}
                                                iconContent={
                                                    <Ico.Youtube stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0, flexDirection: "row", justifyContent: "space-around" }}>
                                            <View>
                                                <Text style={{ alignSelf: "center" }}>شعار الشركة</Text>
                                                <View
                                                    style={{
                                                        overflow: "hidden",
                                                        borderRadius: 10,
                                                        width: 100,
                                                        height: 100,
                                                        elevation: 1,
                                                    }}
                                                >
                                                    <Image
                                                        source={{ uri: this.state.imguri == "" ? Image.resolveAssetSource(require("../assets/imgs/benalogo.png")).uri : this.state.imguri }}
                                                        style={{
                                                            backgroundColor: "#555",
                                                            resizeMode: "contain",
                                                            overflow: "hidden",
                                                            borderRadius: 10,
                                                            width: 100,
                                                            height: 100,
                                                        }}
                                                    />
                                                </View>
                                                <View style={{ flexDirection: "row", justifyContent: "space-around" }}>
                                                    <TouchableOpacity
                                                        onPress={() => {
                                                            setLoad1(true)
                                                            launchCamera(options, (response) => {
                                                                console.log('Response = ', response);

                                                                if (response.didCancel) {
                                                                    console.log('User cancelled image picker');
                                                                } else if (response.error) {
                                                                    console.log('ImagePicker Error: ', response.error);
                                                                } else if (response.customButton) {
                                                                    console.log('User tapped custom button: ', response.customButton);
                                                                } else {
                                                                    // const source = { uri: response.uri };

                                                                    // You can also display the image using data:
                                                                    // const source = { uri: 'data:image/jpeg;base64,' + response.data };
                                                                    CPicker.openCropper({
                                                                        path: response.uri,
                                                                        width: 170,
                                                                        height: 170,
                                                                    }).then(image => {
                                                                        console.log(image);
                                                                        console.log(response.uri)
                                                                        this.setState({
                                                                            imgname: response.fileName || "photo",
                                                                            imgtype: response.type,
                                                                            imguri: "file://" + image.path,
                                                                        });
                                                                        var photo = {
                                                                            uri: "file://" + image.path,
                                                                            type: response.type,
                                                                            name: response.fileName || "photo",
                                                                        };
                                                                        upPic(photo, (v) => { this.setState({ logo: v }) })
                                                                    }).catch(e => {
                                                                        console.log(JSON.stringify(e))
                                                                    });
                                                                    /* 	this.setState({
                                                                            imgname: response.fileName || "photo",
                                                                            imgtype: response.type,
                                                                            imguri: response.uri,
                                                                        }); */

                                                                }
                                                                setLoad1(false)
                                                            });
                                                        }}
                                                        style={{ backgroundColor: "white", width: 32, height: 32, marginTop: 10, borderRadius: 10, alignItems: "center", justifyContent: "center" }}>
                                                        {load1 ?
                                                            <ActivityIndicator color="white" style={{ marginHorizontal: 30 }} /> :
                                                            <Ico.Camera stroke="#000" width={18} />
                                                        }
                                                    </TouchableOpacity>
                                                    <TouchableOpacity
                                                        onPress={() => {
                                                            setLoad2(true)
                                                            launchImageLibrary(options, (response) => {
                                                                console.log('Response = ', response);

                                                                if (response.didCancel) {
                                                                    console.log('User cancelled image picker');
                                                                } else if (response.error) {
                                                                    console.log('ImagePicker Error: ', response.error);
                                                                } else if (response.customButton) {
                                                                    console.log('User tapped custom button: ', response.customButton);
                                                                } else {
                                                                    // const source = { uri: response.uri };

                                                                    // You can also display the image using data:
                                                                    // const source = { uri: 'data:image/jpeg;base64,' + response.data };
                                                                    CPicker.openCropper({
                                                                        path: response.uri,
                                                                        width: 170,
                                                                        height: 170,
                                                                    }).then(image => {
                                                                        console.log(image);
                                                                        console.log(response.uri)
                                                                        this.setState({
                                                                            imgname: response.fileName || "photo",
                                                                            imgtype: response.type,
                                                                            imguri: "file://" + image.path,
                                                                        });
                                                                        var photo = {
                                                                            uri: "file://" + image.path,
                                                                            type: response.type,
                                                                            name: response.fileName || "photo",
                                                                        };
                                                                        upPic(photo, (v) => { this.setState({ logo: v }) })
                                                                    }).catch(e => {
                                                                        console.log(JSON.stringify(e))
                                                                    });
                                                                    /* this.setState({
                                                                        imgname: response.fileName || "photo",
                                                                        imgtype: response.type,
                                                                        imguri: response.uri,
                                                                    }); */
                                                                }
                                                                setLoad2(false)
                                                            });
                                                        }}
                                                        style={{ backgroundColor: "white", width: 32, height: 32, marginTop: 10, borderRadius: 10, alignItems: "center", justifyContent: "center" }}>
                                                        {load2 ?
                                                            <ActivityIndicator color="white" style={{ marginHorizontal: 30 }} /> :
                                                            <Ico.Image stroke="#000" width={18} />
                                                        }
                                                    </TouchableOpacity>
                                                </View>

                                            </View>
                                            <View>
                                                <Text style={{ alignSelf: "center" }}>الصورة الرئيسية</Text>

                                                <View
                                                    style={{
                                                        overflow: "hidden",
                                                        borderRadius: 10,
                                                        width: 100,
                                                        height: 100,
                                                        elevation: 1,
                                                    }}
                                                >
                                                    <Image
                                                        source={{ uri: this.state.imguri2 == "" ? Image.resolveAssetSource(require("../assets/imgs/benalogo.png")).uri : this.state.imguri2 }}
                                                        style={{
                                                            backgroundColor: "#555",
                                                            resizeMode: "contain",
                                                            overflow: "hidden",
                                                            borderRadius: 10,
                                                            width: 100,
                                                            height: 100,
                                                        }}
                                                    />
                                                </View>

                                                <View style={{ flexDirection: "row", justifyContent: "space-around" }}>
                                                    <TouchableOpacity
                                                        onPress={() => {
                                                            setLoad1(true)
                                                            launchCamera(options, (response) => {
                                                                console.log('Response = ', response);

                                                                if (response.didCancel) {
                                                                    console.log('User cancelled image picker');
                                                                } else if (response.error) {
                                                                    console.log('ImagePicker Error: ', response.error);
                                                                } else if (response.customButton) {
                                                                    console.log('User tapped custom button: ', response.customButton);
                                                                } else {
                                                                    // const source = { uri: response.uri };

                                                                    // You can also display the image using data:
                                                                    // const source = { uri: 'data:image/jpeg;base64,' + response.data };
                                                                    CPicker.openCropper({
                                                                        path: response.uri,
                                                                        width: 170,
                                                                        height: 170,
                                                                    }).then(image => {
                                                                        console.log(image);
                                                                        console.log(response.uri)
                                                                        this.setState({
                                                                            imgname2: response.fileName || "photo",
                                                                            imgtype2: response.type,
                                                                            imguri2: "file://" + image.path,
                                                                        });
                                                                        var photo = {
                                                                            uri: "file://" + image.path,
                                                                            type: response.type,
                                                                            name: response.fileName || "photo",
                                                                        };
                                                                        upPic(photo, (v) => { this.setState({ photo: v }) })
                                                                    }).catch(e => {
                                                                        console.log(JSON.stringify(e))
                                                                    });
                                                                    /* 	this.setState({
                                                                            imgname: response.fileName || "photo",
                                                                            imgtype: response.type,
                                                                            imguri: response.uri,
                                                                        }); */

                                                                }
                                                                setLoad1(false)
                                                            });
                                                        }}
                                                        style={{ backgroundColor: "white", width: 32, height: 32, marginTop: 10, borderRadius: 10, alignItems: "center", justifyContent: "center" }}>
                                                        {load1 ?
                                                            <ActivityIndicator color="white" style={{ marginHorizontal: 30 }} /> :
                                                            <Ico.Camera stroke="#000" width={18} />
                                                        }
                                                    </TouchableOpacity>
                                                    <TouchableOpacity
                                                        onPress={() => {
                                                            setLoad2(true)
                                                            launchImageLibrary(options, (response) => {
                                                                console.log('Response = ', response);

                                                                if (response.didCancel) {
                                                                    console.log('User cancelled image picker');
                                                                } else if (response.error) {
                                                                    console.log('ImagePicker Error: ', response.error);
                                                                } else if (response.customButton) {
                                                                    console.log('User tapped custom button: ', response.customButton);
                                                                } else {
                                                                    // const source = { uri: response.uri };

                                                                    // You can also display the image using data:
                                                                    // const source = { uri: 'data:image/jpeg;base64,' + response.data };
                                                                    CPicker.openCropper({
                                                                        path: response.uri,
                                                                        width: 170,
                                                                        height: 170,
                                                                    }).then(image => {
                                                                        console.log(image);
                                                                        console.log(response.uri)
                                                                        this.setState({
                                                                            imgname2: response.fileName || "photo",
                                                                            imgtype2: response.type,
                                                                            imguri2: "file://" + image.path,
                                                                        });
                                                                        var photo = {
                                                                            uri: "file://" + image.path,
                                                                            type: response.type,
                                                                            name: response.fileName || "photo",
                                                                        };
                                                                        upPic(photo, (v) => { this.setState({ photo: v }) })
                                                                    }).catch(e => {
                                                                        console.log(JSON.stringify(e))
                                                                    });
                                                                    /* this.setState({
                                                                        imgname: response.fileName || "photo",
                                                                        imgtype: response.type,
                                                                        imguri: response.uri,
                                                                    }); */
                                                                }
                                                                setLoad2(false)
                                                            });
                                                        }}
                                                        style={{ backgroundColor: "white", width: 32, height: 32, marginTop: 10, borderRadius: 10, alignItems: "center", justifyContent: "center" }}>
                                                        {load2 ?
                                                            <ActivityIndicator color="white" style={{ marginHorizontal: 30 }} /> :
                                                            <Ico.Image stroke="#000" width={18} />
                                                        }
                                                    </TouchableOpacity>
                                                </View>

                                            </View>
                                        </Block>

                                        <Block middle row>
                                            <Button color="primary" onPress={() => { if (uploading <= 0) { setPg(pg + 1) } else { console.log(uploading) } }} style={styles.createButton}>
                                                {uploading > 0 ? <ActivityIndicator color="white" /> :
                                                    <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                        التالي
                    </Text>}
                                            </Button>
                                            <Button color="active" onPress={() => { setPg(pg - 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    السابق
                        </Text>
                                            </Button>
                                        </Block>
                                    </KeyboardAvoidingView>
                                </Block>
                                <Block flex style={{ display: pg == 7 ? "flex" : "none" }} center>
                                    <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                        <Text>صور الشركة</Text>
                                    </Block>
                                    <Block width={width * 0.8} style={{ marginBottom: 20 }}>
                                        <ScrollView horizontal style={{ zIndex: 3 }} contentContainerStyle={{ height: 150, width: width * 0.8 }}>
                                            {imgs.map((item, index) => {
                                                console.log("ITEM : " + index)
                                                return (
                                                    <RenderPics
                                                        uri={item.imguri3}
                                                    />
                                                );
                                            })}
                                        </ScrollView>
                                    </Block>


                                    <Block width={width * 0.8} style={{ marginBottom: 0, flexDirection: "row", justifyContent: "space-around" }}>
                                        <View style={{ flex: 1 }}>
                                            <View style={{ flexDirection: "row", justifyContent: "space-around" }}>
                                                <Block row style={{ marginTop: 10 }} >
                                                    <AIcon name="plussquareo" size={18} style={{ marginRight: 5, marginLeft: 5, marginTop: 3 }} />
                                                    <Text>اضافة صور : </Text>
                                                </Block>
                                                <TouchableOpacity
                                                    onPress={() => {
                                                        setLoad1(true)
                                                        launchCamera(options, (response) => {
                                                            console.log('Response = ', response);

                                                            if (response.didCancel) {
                                                                console.log('User cancelled image picker');
                                                            } else if (response.error) {
                                                                console.log('ImagePicker Error: ', response.error);
                                                            } else if (response.customButton) {
                                                                console.log('User tapped custom button: ', response.customButton);
                                                            } else {
                                                                // const source = { uri: response.uri };

                                                                // You can also display the image using data:
                                                                // const source = { uri: 'data:image/jpeg;base64,' + response.data };
                                                                CPicker.openCropper({
                                                                    path: response.uri,
                                                                    width: 170,
                                                                    height: 170,
                                                                }).then(image => {
                                                                    console.log(image);
                                                                    console.log(response.uri)

                                                                    var imgss = []

                                                                    imgs.forEach(e => {
                                                                        imgss.push(e)
                                                                    });
                                                                    imgss.push({
                                                                        imgname3: response.fileName || "photo",
                                                                        imgtype3: response.type,
                                                                        imguri3: "file://" + image.path,
                                                                    })
                                                                    setImgs(imgss)
                                                                    this.setState({
                                                                        imgname3: response.fileName || "photo",
                                                                        imgtype3: response.type,
                                                                        imguri3: "file://" + image.path,
                                                                    });
                                                                    var photo = {
                                                                        uri: "file://" + image.path,
                                                                        type: response.type,
                                                                        name: response.fileName || "photo",
                                                                    };
                                                                    upPic(photo, (v) => {
                                                                        var imgs = this.state.photos
                                                                        this.setState({ photos: imgs + v + "<br>" })
                                                                    })
                                                                }).catch(e => {
                                                                    console.log(JSON.stringify(e))
                                                                });
                                                                /* 	this.setState({
                                                                        imgname: response.fileName || "photo",
                                                                        imgtype: response.type,
                                                                        imguri: response.uri,
                                                                    }); */

                                                            }
                                                            setLoad1(false)
                                                        });
                                                    }}
                                                    style={{ backgroundColor: "white", width: 32, height: 32, marginTop: 10, borderRadius: 10, alignItems: "center", justifyContent: "center" }}>
                                                    {load1 ?
                                                        <ActivityIndicator color="white" style={{ marginHorizontal: 30 }} /> :
                                                        <Ico.Camera stroke="#000" width={18} />
                                                    }
                                                </TouchableOpacity>
                                                <TouchableOpacity
                                                    onPress={() => {
                                                        setLoad2(true)
                                                        launchImageLibrary(options, (response) => {
                                                            console.log('Response = ', response);

                                                            if (response.didCancel) {
                                                                console.log('User cancelled image picker');
                                                            } else if (response.error) {
                                                                console.log('ImagePicker Error: ', response.error);
                                                            } else if (response.customButton) {
                                                                console.log('User tapped custom button: ', response.customButton);
                                                            } else {
                                                                // const source = { uri: response.uri };

                                                                // You can also display the image using data:
                                                                // const source = { uri: 'data:image/jpeg;base64,' + response.data };
                                                                CPicker.openCropper({
                                                                    path: response.uri,
                                                                    width: 170,
                                                                    height: 170,
                                                                }).then(image => {
                                                                    console.log(image);
                                                                    console.log(response.uri)

                                                                    var imgss = []

                                                                    imgs.forEach(e => {
                                                                        imgss.push(e)
                                                                    });
                                                                    imgss.push({
                                                                        imgname3: response.fileName || "photo",
                                                                        imgtype3: response.type,
                                                                        imguri3: "file://" + image.path,
                                                                    })
                                                                    setImgs(imgss)
                                                                    this.setState({
                                                                        imgname3: response.fileName || "photo",
                                                                        imgtype3: response.type,
                                                                        imguri3: "file://" + image.path,
                                                                    });
                                                                    var photo = {
                                                                        uri: "file://" + image.path,
                                                                        type: response.type,
                                                                        name: response.fileName || "photo",
                                                                    };
                                                                    upPic(photo, (v) => {
                                                                        var imgs = this.state.photos
                                                                        this.setState({ photos: imgs + v + "<br>" })
                                                                    })
                                                                }).catch(e => {
                                                                    console.log(JSON.stringify(e))
                                                                });
                                                                /* this.setState({
                                                                    imgname: response.fileName || "photo",
                                                                    imgtype: response.type,
                                                                    imguri: response.uri,
                                                                }); */
                                                            }
                                                            setLoad2(false)
                                                        });
                                                    }}
                                                    style={{ backgroundColor: "white", width: 32, height: 32, marginTop: 10, borderRadius: 10, alignItems: "center", justifyContent: "center" }}>
                                                    {load2 ?
                                                        <ActivityIndicator color="white" style={{ marginHorizontal: 30 }} /> :
                                                        <Ico.Image stroke="#000" width={18} />
                                                    }
                                                </TouchableOpacity>
                                            </View>
                                        </View>
                                    </Block>
                                    <Block middle row>
                                        <Button color="primary" onPress={() => {
                                            if (uploading <= 0) {
                                                setLoading(true)

                                                let whrs = this.state.workinghours
                                                let wh = {}
                                                if (w1) {
                                                    if (d1) {
                                                        wh.Saturday = "24 Hours"
                                                    } else {
                                                        wh.Saturday = whrs["s1"] + " - " + whrs["e1"]
                                                    }
                                                }
                                                if (w2) {
                                                    if (d2) {
                                                        wh.Sunday = "24 Hours"
                                                    } else {
                                                        wh.Sunday = whrs["s2"] + " - " + whrs["e2"]
                                                    }
                                                }
                                                if (w3) {
                                                    if (d3) {
                                                        wh.Monday = "24 Hours"
                                                    } else {
                                                        wh.Monday = whrs["s3"] + " - " + whrs["e3"]
                                                    }
                                                }
                                                if (w4) {
                                                    if (d4) {
                                                        wh.Tuesday = "24 Hours"
                                                    } else {
                                                        wh.Tuesday = whrs["s4"] + " - " + whrs["e4"]
                                                    }
                                                }
                                                if (w5) {
                                                    if (d5) {
                                                        wh.Wednesday = "24 Hours"
                                                    } else {
                                                        wh.Wednesday = whrs["s5"] + " - " + whrs["e5"]
                                                    }
                                                }
                                                if (w6) {
                                                    if (d6) {
                                                        wh.Thursday = "24 Hours"
                                                    } else {
                                                        wh.Thursday = whrs["s6"] + " - " + whrs["e6"]
                                                    }
                                                }
                                                if (w7) {
                                                    if (d7) {
                                                        wh.Friday = "24 Hours"
                                                    } else {
                                                        wh.Friday = whrs["s7"] + " - " + whrs["e7"]
                                                    }
                                                }

                                                let jdata = {
                                                    name: "" + this.state.name,
                                                    address: "" + this.state.address,
                                                    city: "" + this.state.city,
                                                    phone: "" + this.state.phone,
                                                    site: "" + this.state.site,
                                                    section: "" + this.state.section,
                                                    workinghours: "" + JSON.stringify(wh),
                                                    facebook: "" + this.state.facebook,
                                                    twitter: "" + this.state.twitter,
                                                    youtube: "" + this.state.youtube,
                                                    instagram: "" + this.state.instagram,
                                                    linkedin: "" + this.state.linkedin,
                                                    faq: "" + JSON.stringify(this.state.faq),
                                                    description: "" + this.state.description,
                                                    tags: "" + this.state.tags,
                                                    video: "" + this.state.video,
                                                    logo: "" + this.state.logo,
                                                    photo: "" + this.state.photo,
                                                    photos: "" + this.state.photos,
                                                    mail_type: "Register-Listing"
                                                }
                                                post("wp-json/sqljson/v1/mailer", jdata).then(res => {
                                                    setLoading(false)
                                                    console.log(res)
                                                    setPg(90)
                                                    // this.props.navigation.goBack();
                                                })
                                            }
                                        }} style={styles.createButton}>
                                            {
                                                loading || (uploading > 0) ? <ActivityIndicator color="white" /> :
                                                    <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                        تسجيل
                        </Text>
                                            }
                                        </Button>
                                        <Button color="active" onPress={() => { setPg(pg - 1) }} style={styles.createButton}>
                                            <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                السابق
                        </Text>
                                        </Button>
                                    </Block>
                                </Block>
                                <Block flex style={{ display: pg == 90 ? "flex" : "none" }} center>
                                    <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                        <Icon name="check-circle" size={64} color="green" style={{ marginRight: 5, marginLeft: 5, marginTop: 3 }} />

                                    </Block>
                                    <Block width={width * 0.8} style={{ marginBottom: 20 }}>
                                        <Text>تم تسجيل الشركة</Text>
                                        <Text>سيتم مراجعتها في اقرب فرصة</Text>
                                        <Text>شكراً لتفهمكم</Text>
                                        <Block middle row style={{ display: "none" }}>
                                            <Button color="primary" onPress={() => {
                                                // const popAction = StackActions.pop();
                                                this.props.navigation.goBack();
                                                setTimeout(() => {
                                                    this.props.navigation.navigate("Vregister");
                                                }, 500);
                                            }} style={styles.createButton}>
                                                {
                                                    loading ? <ActivityIndicator color="white" /> :
                                                        <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                            تسجيل شركة جديدة
                        </Text>
                                                }
                                            </Button>
                                        </Block>
                                    </Block>
                                </Block>
                                <Block flex style={{ display: pg == 8 ? "flex" : "none" }} center>
                                    <KeyboardAvoidingView
                                        style={{ flex: 1, alignItems: "center" }}
                                        behavior="padding"
                                        enabled
                                    >
                                        <View style={{ flexDirection: "row", marginLeft: 20, overflow: "hidden", display: pg == 8 ? "flex" : "none" }}>
                                            <Text>هل لديك حساب ؟</Text>
                                            <CheckBox style={{ width: 20, height: 20, marginRight: 10, marginLeft: 20 }}
                                                value={q1}
                                                onValueChange={() => { setQ1(!q1) }}
                                            />
                                        </View>
                                        <Block width={width * 0.8} style={{ marginBottom: 0, display: !q1 ? "flex" : "none" }}>
                                            <Input
                                                borderless
                                                placeholder="اسم المستخدم"
                                                iconContent={
                                                    <Ico.User stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0 }}>
                                            <Input
                                                borderless
                                                placeholder="البريد الالكتروني"
                                                iconContent={
                                                    <Ico.Mail stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Block width={width * 0.8} style={{ marginBottom: 0, display: q1 ? "flex" : "none" }}>
                                            <Input
                                                borderless
                                                placeholder="كلمة المرور"
                                                iconContent={
                                                    <Ico.Lock stroke="#000" style={{ marginRight: 5 }} width={18} />
                                                }
                                            />
                                        </Block>
                                        <Text style={{ display: q1 ? "flex" : "none" }} onPress={() => { this.props.navigation.navigate("Vforget") }}>
                                            هل نسيت كلمة المرور؟
                                      </Text>
                                        <Block middle row>
                                            <Button color="primary" onPress={() => { }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    تسجيل
                        </Text>
                                            </Button>
                                            <Button color="active" onPress={() => { setPg(pg - 1) }} style={styles.createButton}>
                                                <Text bold size={14} color={argonTheme.COLORS.WHITE}>
                                                    السابق
                        </Text>
                                            </Button>
                                        </Block>
                                    </KeyboardAvoidingView>
                                </Block>

                            </Block>
                        </Block>
                    </View>
                </ImageBackground>
            </Block>
        );
    }
    render() {
        return <this.Main />
    }
}

const styles = StyleSheet.create({
    registerContainer: {
        width: width * 0.9,
        flex: 0.6,
        // height: 300,
        backgroundColor: "#F4F5F7",
        borderRadius: 4,
        shadowColor: argonTheme.COLORS.BLACK,
        shadowOffset: {
            width: 0,
            height: 4
        },
        shadowRadius: 8,
        shadowOpacity: 0.1,
        elevation: 1,
        marginTop: -100,
        alignSelf: "center",
        alignContent: "center",
        overflow: "hidden"
    },
    socialConnect: {
        backgroundColor: argonTheme.COLORS.WHITE,
        borderBottomWidth: StyleSheet.hairlineWidth,
        borderColor: "#8898AA"
    },
    socialButtons: {
        width: 120,
        height: 40,
        backgroundColor: "#fff",
        shadowColor: argonTheme.COLORS.BLACK,
        shadowOffset: {
            width: 0,
            height: 4
        },
        shadowRadius: 8,
        shadowOpacity: 0.1,
        elevation: 1
    },
    socialTextButtons: {
        color: argonTheme.COLORS.PRIMARY,
        fontWeight: "800",
        fontSize: 14
    },
    inputIcons: {
        marginRight: 12
    },
    passwordCheck: {
        paddingLeft: 15,
        paddingTop: 13,
        paddingBottom: 30
    },
    createButton: {
        width: 150,
        marginTop: 25,
    }
});

export default Register;
